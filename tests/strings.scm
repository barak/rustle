(require "testing")
;(SECTION 6 7)
(test #t (string? "The word \"recursion\\\" has many meanings."))
(test #t (string? ""))
;(define f (make-string 3 #\*))
;(test "?**" 'string-set! (begin (string-set! f 0 #\?) f))
;(test "abc" string #\a #\b #\c)
;(test "" string)
;(test 3 string-length "abc")
;(test #\a string-ref "abc" 0)
;(test #\c string-ref "abc" 2)
;(test 0 string-length "")
;(test "" substring "ab" 0 0)
;(test "" substring "ab" 1 1)
;(test "" substring "ab" 2 2)
;(test "a" substring "ab" 0 1)
;(test "b" substring "ab" 1 2)
;(test "ab" substring "ab" 0 2)
;(test "foobar" string-append "foo" "bar")
;(test "foo" string-append "foo")
;;(test "foo" string-append "foo" "")
;(test "foo" string-append "" "foo")
;(test "" string-append)
;(test "" make-string 0)
;(test #t string=? "" "")
;(test #f string<? "" "")
;(test #f string>? "" "")
;(test #t string<=? "" "")
;(test #t string>=? "" "")
;(test #t string-ci=? "" "")
;(test #f string-ci<? "" "")
;(test #f string-ci>? "" "")
;(test #t string-ci<=? "" "")
;(test #t string-ci>=? "" "")

;; (test #f string=? "A" "B")
;; (test #f string=? "a" "b")
;; (test #f string=? "9" "0")
;; (test #t string=? "A" "A")

;; (test #t string<? "A" "B")
;; (test #t string<? "a" "b")
;; (test #f string<? "9" "0")
;; (test #f string<? "A" "A")

;; (test #f string>? "A" "B")
;; (test #f string>? "a" "b")
;; (test #t string>? "9" "0")
;; (test #f string>? "A" "A")

;; (test #t string<=? "A" "B")
;; (test #t string<=? "a" "b")
;; (test #f string<=? "9" "0")
;; (test #t string<=? "A" "A")

;; (test #f string>=? "A" "B")
;; (test #f string>=? "a" "b")
;; (test #t string>=? "9" "0")
;; (test #t string>=? "A" "A")

;; (test #f string-ci=? "A" "B")
;; (test #f string-ci=? "a" "B")
;; (test #f string-ci=? "A" "b")
;; (test #f string-ci=? "a" "b")
;; (test #f string-ci=? "9" "0")
;; (test #t string-ci=? "A" "A")
;; (test #t string-ci=? "A" "a")

;; (test #t string-ci<? "A" "B")
;; (test #t string-ci<? "a" "B")
;; (test #t string-ci<? "A" "b")
;; (test #t string-ci<? "a" "b")
;; (test #f string-ci<? "9" "0")
;; (test #f string-ci<? "A" "A")
;; (test #f string-ci<? "A" "a")

;; (test #f string-ci>? "A" "B")
;; (test #f string-ci>? "a" "B")
;; (test #f string-ci>? "A" "b")
;; (test #f string-ci>? "a" "b")
;; (test #t string-ci>? "9" "0")
;; (test #f string-ci>? "A" "A")
;; (test #f string-ci>? "A" "a")

;; (test #t string-ci<=? "A" "B")
;; (test #t string-ci<=? "a" "B")
;; (test #t string-ci<=? "A" "b")
;; (test #t string-ci<=? "a" "b")
;; (test #f string-ci<=? "9" "0")
;; (test #t string-ci<=? "A" "A")
;; (test #t string-ci<=? "A" "a")

;; (test #f string-ci>=? "A" "B")
;; (test #f string-ci>=? "a" "B")
;; (test #f string-ci>=? "A" "b")
;; (test #f string-ci>=? "a" "b")
;; (test #t string-ci>=? "9" "0")
;; (test #t string-ci>=? "A" "A")
;; (test #t string-ci>=? "A" "a")
