(require "testing")
;(SECTION 6 4)
(test #t (symbol? 'foo))
(test #t (symbol? (car '(a b))))
(test #f (symbol? "bar"))
(test #t (symbol? 'nil))
(test #f (symbol? '()))
(test #f (symbol? #f))

;;; But first, what case are symbols in?  Determine the standard case:
;; (define char-standard-case char-upcase)
;; (if (string=? (symbol->string 'A) "a")
;;     (set! char-standard-case char-downcase))
;; (test #t 'standard-case
;;       (string=? (symbol->string 'a) (symbol->string 'A)))
;; (test #t 'standard-case
;;       (or (string=? (symbol->string 'a) "A")
;; 	  (string=? (symbol->string 'A) "a")))
;; (define (str-copy s)
;;   (let ((v (make-string (string-length s))))
;;     (do ((i (- (string-length v) 1) (- i 1)))
;; 	((< i 0) v)
;;       (string-set! v i (string-ref s i)))))
;; (define (string-standard-case s)
;;   (set! s (str-copy s))
;;   (do ((i 0 (+ 1 i))
;;        (sl (string-length s)))
;;       ((>= i sl) s)
;;       (string-set! s i (char-standard-case (string-ref s i)))))
;; (test (string-standard-case "flying-fish") symbol->string 'flying-fish)
;; (test (string-standard-case "martin") symbol->string 'Martin)
;; (test "Malvina" symbol->string (string->symbol "Malvina"))
;; (test #t 'standard-case (eq? 'a 'A))

;(define x (string #\a #\b))
;(define y (string->symbol x))
;(string-set! x 0 #\c)
;(test "cb" (string-set! x))
;(test "ab" (symbol->string y))
;(test y (string->symbol "ab"))

(test #t (eq? 'mISSISSIppi 'mississippi))
;(test #f 'string->symbol (eq? 'bitBlt (string->symbol "bitBlt")))
;(test 'JollyWog (string->symbol (symbol->string 'JollyWog)))
